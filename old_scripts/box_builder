#!/usr/bin/python
# -*- coding: utf8 -*-
"""
Author : Julien Georges
Project : https://github.com/GiooDev/box
Date : October 2014
Description : This script will generate a box from scratch based on a ks
and a mounted system iso
"""
import os
import sys
import argparse

## Configuration
#Default parameters
BOX_NAME = 'puppetbox-rhel7'
BOX_PATH = '/my/libvirt/images'

TREE = 'http://192.168.1.1/rhel/rhel-server-7.0-x86-64/'
KICKSTART = 'http://192.168.1.1/libvirt/ks/base.ks'

## Parameters
PARSER = argparse.ArgumentParser(
  description='This script will help you to easily create a new domain with \
 libvirt.')
PARSER.add_argument('-v', '--verbose', action='store_true',
                    help='Enable verbose output')
PARSER.add_argument('-n', '--name', type=str,
                    help='The name of your VM \
                          (default: '+BOX_NAME+')')
PARSER.add_argument('-p', '--path', type=str,
                    help='The path to create your VM \
                          (default: '+BOX_PATH+')')
PARSER.add_argument('-t', '--tree', type=str,
                    help='The path to the mounted iso \
                          (default: '+TREE+')')
PARSER.add_argument('-ks', '--kickstart', type=str,
                    help='The kickstart to install your VM \
                          (default: '+KICKSTART+')')
PARSER.add_argument('-f', '--force', action='store_true',
                    help='Erase the VM if exists \
                          (default: false)')
ARGS = PARSER.parse_args()

if ARGS.name:
    BOX_NAME = ARGS.name

if ARGS.path:
    BOX_PATH = ARGS.path

if ARGS.tree:
    TREE = ARGS.tree

if ARGS.kickstart:
    KICKSTART = ARGS.kickstart

## Execution
VIRSH_BIN = '/usr/bin/virsh -c qemu:///system'
if os.system(VIRSH_BIN+' dominfo '+BOX_NAME):
    #The box doesn't exists
    if ARGS.verbose:
        print('The box '+BOX_NAME+' doesn\'t exist. Continuing...')
else:
    #Clean the domain if it exists (force mode, or just quit with warning)
    print('The box '+BOX_NAME+' already exist...')
    if ARGS.force:
        print('Deleting box '+BOX_NAME)
        os.system(VIRSH_BIN+' destroy '+BOX_NAME)
        os.system(VIRSH_BIN+' undefine '+BOX_NAME)
        os.remove(BOX_PATH+'/'+BOX_NAME+'.img')
    else:
        print('Exiting... Use --force option to delete the vm')
        sys.exit(1)

#Mount iso on TREE
#Because we couldn't pass directly the iso file with location parameter
#or we couldn't use the KICKSTART file

VIRTINSTALL_BIN = '/usr/bin/virt-install --connect=qemu:///system'
VIRTINSTALL_CMD = VIRTINSTALL_BIN+' --network=bridge:virbr0'
VIRTINSTALL_CMD += ' --extra-args="ks='+KICKSTART+' \
console=tty0 console=ttyS0,115200"'
VIRTINSTALL_CMD += ' --name='+BOX_NAME
VIRTINSTALL_CMD += ' --disk '+BOX_PATH+'/'+BOX_NAME+'.img,size=5'
VIRTINSTALL_CMD += ' --location='+TREE
VIRTINSTALL_CMD += ' --ram 1024 --vcpus=2 --check-cpu --accelerate --hvm'
VIRTINSTALL_CMD += ' --nographics --noreboot --noautoconsole --wait=60'
# --noreboot option doesn't restart the box after installing it
# --noautoconsole option doesn't start the interactive console
# --wait=60 option will wait 60 minutes before stopping the process
if ARGS.verbose:
    print('Executing: '+VIRTINSTALL_CMD)
os.system(VIRTINSTALL_CMD)
